
        // 因为操作真实dom的代价是昂贵的，小小的改动就可能需要重构整颗dom树。查找同理
        // 虚拟dom就是使用js对象来模拟真实dom元素。
        // 为什么操作真实dom成本高
        // 因为dom树模块跟js模块是两个部分 跨模块通信的消耗很大
        // 操作dom会引起浏览器的回流重绘 开销也很大 
        // 操作dom的速度远比js慢的多 其实虚拟dom可以类比成缓存

        // 虚拟dom如果在单次操作下不一定就快于真实dom甚至会低于，他的优势在于频繁大量的操作dom。
        // 为了实现高效的操作dom，就诞生了diff算法。
        // diff算法其实就是一个比较同层树节点的算法
        // 他只进行同层比较 循环从两边收拢
        // diff算法的核心函数我认为是patch函数
        // patch(container, vnode)初次渲染时会将虚拟dom渲染成真实dom后再塞进container容器中
        // patch(oldvode, newvode)再次渲染后就会比较新旧vnode然后再渲染dom树

        // 如何判断是同一个节点呢 key值一样 tag也一样
        // 如果两个节点都是一样的，那么就深入检查他们的子节点。
        // 如果两个节点不一样那就说明 Vnode 完全被改变了(ul和div节点不一样)，
        // 就可以直接使用新节点替换老节点。【他们的子代不会进行比较了】
        //  diff算法的缺点 父节点不一样 子节点一样 但是也会重构
        vue2 diff算法 深度优先 同层比较 循环从两边向中间收拢
        vue3 diff    头尾比较 中间最长递增子序列 事件缓存 静态标记
