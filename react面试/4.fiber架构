问题:js与页面渲染是互斥的 如果js线程长时间的占用了主线程 那么渲染进程将一直处于挂起状态 用户会觉得页面很卡顿 体验差 
react在diff中是不可中断的 这个过程叫reconciliation 在这期间React 会霸占着浏览器资源 所以会造成页面卡顿
    fiber就是解决react在reconciliation不可中断的问题
    1.给每个任务添加了优先级 优先级高的任务可以中断优先级低的任务 然后再重新执行优先级低的任务
    2.增加异步任务 在浏览器空闲时执行


react主动让出控制权 因为浏览器没有抢占的机制 不能中断一个正在执行的程序 
控制权让出机制叫合作式调度(cooperative scheduling) 由浏览器分配时间片 在这段时间内完成后 将控制权还给浏览器

如何判断任务优先级？
我们无法判断当前是否有一个优先级更高的任务在等待执行  
所以解决方法是：确定一个合理的运行时长，然后确定一个合适的检测点来检测是否超时 如果超时就将控制权还给浏览器
浏览器提供了一个API叫requestIdleCallback  让浏览器在空闲时就执行回调 这个回调会传入一个期限 表示浏览器有多少时间提供给我们执行
理想的一帧时间是1000ms/60=16ms 如果在分配时间片的时间内解决完 就会产生出盈余事件 此时可以调用requestIdleCallback回调 
但是如果没有盈余时间 任务可能会饿死 第二个参数可以指定一个超时时间